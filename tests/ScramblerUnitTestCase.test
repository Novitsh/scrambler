<?php
/**
 * @file
 * Contains the unit tests for the scrambler.
 */

/**
 * Scrambler Unit Test case.
 */
class ScramblerUnitTestCase extends DrupalUnitTestCase {

  /**
   * Get info for the ScramblerUnitTestCase.
   *
   * @return array
   *   Returns info array.
   */
  public static function getInfo() {
    return array(
      'name' => 'Scrambler Unit Tests',
      'description' => 'Test the scrambler functions.',
      'group' => 'Scrambler',
    );
  }

  /**
   * Test the shuffle_characters method for a short string.
   */
  public function testMethodShuffleCharactersShortString() {
    // The goal is to make it fail and therefore we test for 10 random strings.
    $strings = array(
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2),
      $this->randomString(2)
    );
    foreach ($strings as $string) {
      $first = $second = $string;
      _scrambler_method_shuffle_characters($first);
      $this->assertNotEqual($first, $second);
    }
  }

  /**
   * Test shuffle characters for a string that contains the same characters.
   */
  public function testMethodShuffleCharactersSameLetters() {
    $letter = $this->randomString(1);
    $first = $second = $letter . $letter;
    _scrambler_method_shuffle_characters($first);
    $this->assertNotEqual($first, $second);
  }

  /**
   * Test the shuffle_characters method for a long string.
   */
  public function testMethodShuffleCharactersLongString() {
    $first = $second = $this->randomString(255);
    _scrambler_method_shuffle_characters($first);
    $this->assertNotEqual($first, $second);
  }

  /**
   * Test the shuffle_characters method for a long string.
   */
  public function testMethodShuffleCharactersNonString() {
    $firstint = $secondint = 100;
    _scrambler_method_shuffle_characters($firstint);
    $this->assertEqual($firstint, $secondint);

    $firstobject = $secondobject = new ScramblerDummy($this->randomString(2));
    _scrambler_method_shuffle_characters($firstobject);
    $this->assertEqual($firstobject, $secondobject);
  }

  /**
   * Test the shuffle_words method for a short sentence with 2 exact same words.
   */
  public function testMethodShuffleWordsSameWords() {
    $word = $this->randomString(10);
    $first = $second = $word . ' ' . $word;
    _scrambler_method_shuffle_words($first);
    $this->assertNotEqual($first, $second);
  }

  /**
   * Test the shuffle_words method for a short sentence.
   */
  public function testMethodShuffleWordsShortSentence() {
    // Make it fail and therefore it is tested for 10 random sentences.
    $sentences = array(
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
      $this->randomString(1) . ' ' . $this->randomString(1),
    );
    foreach ($sentences as $sentence) {
      $first = $second = $sentence;
      _scrambler_method_shuffle_words($first);
      $this->assertNotEqual($first, $second);
    }
  }

  /**
   * Test the shuffle_words method for a long string.
   */
  public function testMethodShuffleWordsNonString() {
    $firstint = $secondint = 100;
    _scrambler_method_shuffle_words($firstint);
    $this->assertEqual($firstint, $secondint);

    $firstobject = $secondobject = new ScramblerDummy($this->randomString(2));
    _scrambler_method_shuffle_words($firstobject);
    $this->assertEqual($firstobject, $secondobject);
  }

  /**
   * Test the shuffle_words method for a long sentence.
   */
  public function testMethodShuffleWordsLongSentence() {
    $sentence = array();
    for ($i = 0; $i < 100; $i++) {
      $sentence[] = $this->randomString(rand(3, 15));
    }
    $first = $second = implode(' ', $sentence);
    _scrambler_method_shuffle_words($first);
    $this->assertNotEqual($first, $second);
  }

  /**
   * Test the empty_value method for a normal random string.
   */
  public function testMethodEmptyValue() {
    $data = $this->randomString(10);
    _scrambler_method_empty_value($data);
    $this->assertEqual($data, '');
  }

  /**
   * Test the empty_value method for a non string.
   */
  public function testMethodEmptyValueNonString() {
    $first = $second = new ScramblerDummy($this->randomString(2));
    _scrambler_method_empty_value($first);
    $this->assertEqual($first, $second);
  }

  /**
   * Test the scramble_email method for different an e-mail.
   */
  public function testMethodScrambleEmail() {
    $first = $second = $this->randomName(10) . '@' .
      $this->randomName(4) . '.' . $this->randomName(2);
    _scrambler_method_scramble_email($first);
    $this->assertNotEqual($first, $second);
    $this->assertTrue(
      valid_email_address($first),
      'E-mail invalid after scramble'
    );
  }

  /**
   * Test the scramble_email method for a non e-mail.
   */
  public function testMethodScrambleNonEmail() {
    $first = $second = new ScramblerDummy($this->randomString(2));
    $this->assertEqual($first, $second);
  }

  /**
   * Test the scramble_url method for a range of url's.
   */
  public function testMethodScrambleUrl() {
    $urls = array(
      $this->randomName(),
      'http://' . $this->randomName(3) .'.'.$this->randomName().'.' . $this->randomName(3) . '/',
      'http://u:p@foo:1/path/path?q#frag',
      'http://u:p@foo:1/path/path?#',
      'ssh://root@host',
      '://:@:1/?#'
    );
    foreach ($urls as $url) {
      $original = $url;
      _scrambler_method_scramble_url($url);
      $this->assertNotEqual($original, $url);
    }
  }
}

/**
 * Scrambler dummy class used for testing purposes.
 */
class ScramblerDummy {
  /**
   * @var mixed
   */
  public $value;

  /**
   * Class constructor for the dummy object.
   *
   * @param mixed $value
   */
  function __construct($value) {
    $this->value = $value;
  }
}
